from elasticsearch import Elasticsearch
from plyer import notification
import sched, time

# Password for the 'elastic' user generated by Elasticsearch
ELASTIC_USERNAME = "elastic"
ELASTIC_PASSWORD = "ductho"
ELASTIC_HOST = "https://localhost:9200/"
datastream_name = "logs-system-memory"


def get_latest_records(max_persent):
    # Thay đổi địa chỉ Elasticsearch, thông tin xác thực, và phiên bản Elasticsearch theo tài khoản của bạn
    es = Elasticsearch(
        ELASTIC_HOST,
        ca_certs="C:/elasticsearch-8.7.0/config/certs/http_ca.crt",
        basic_auth=(ELASTIC_USERNAME, ELASTIC_PASSWORD),
    )

    # Truy vấn Elasticsearch để lấy 1 kết quả mới nhất
    query = {
        "size": 1,
        "sort": [{"@timestamp": {"order": "desc"}}],
        "query": {"match_all": {}},
    }
    response = es.search(index=datastream_name, body=query)

    # Kiểm tra và xử lý kết quả
    if response["hits"]["hits"]:
        for hit in response["hits"]["hits"]:
            source = hit["_source"]
            # Truy cập các trường bạn muốn từ kết quả
            percent = source["system"]["memory"]["used"]["pct"]
            # Xử lý kết quả ở đây
            # print("Field a: {}, Field b: {}".format(field_a, field_b))
            # print(percent)
            if percent > max_persent:
                notification.notify(
                    title="Memory limit: {}".format(max_persent),
                    message="memory reached the warning limit: {}".format(percent),
                    timeout=3,
                )
                break
    else:
        print("No records found.")
        notification.notify(title="Memory", message="Read data error", timeout=3)

    # Đóng kết nối Elasticsearch
    es.close()


# Gọi hàm để lấy 10 kết quả mới nhất
# Lặp lại truy vấn mỗi 10 giây
# def run_memory_check(scheduler):
#     # schedule the next call first
#     scheduler.enter(10, 1, run_memory_check, (scheduler,))
#     get_latest_records(0.8)
#     # then do your stuff

# my_scheduler = sched.scheduler(time.time, time.sleep)
# my_scheduler.enter(10, 1, run_memory_check, (my_scheduler,))
# my_scheduler.run()
