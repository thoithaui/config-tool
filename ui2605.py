# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui/main.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMessageBox
from threading import Thread
import subprocess
from subprocess import PIPE, Popen
import sched, time
import pyuac
from plyer import notification
import os
import shutil
from config_file import (
    metricbeat_yml,
    metricbeat_config_mysql,
    metricbeat_module_mysql,
    metricbeat_module_mongodb,
    metricbeat_module_system,
    metricbeat_module_tomcat,
    filebeat_config_yml,
    filebeat_module_mysql,
    logstash_conf
)
from config_script import (metric_create_ps1,filebeat_create_ps1,logstash_create_ps1)
from get_data_elasticsearch import (get_max_cpu, get_max_memory, get_mysql_max_connected, get_mysql_error, get_mongodb_cons, get_mongodb_queue, create_elastic_cons, end_elastic_cons, get_tomcat_total_error)
from PyQt5.QtGui import QTextCursor
from send_notification import send_notification

# Lặp lại truy vấn
def run_scheduler_alarm(scheduler):
    # schedule the next call first
    try:
        scheduler.enter(time_loop, 1, run_scheduler_alarm, (scheduler,))
        if memory:
            mess = []
            mess_memory = get_max_memory(memory_max, time_loop)
            for m in mess_memory:
                mess.append(m)
            if len(mess) > 0:
                mess_noti = ""
                for m in mess:
                    mess_noti+=m+"\n"
                notification.notify(message=mess_noti,timeout=3,)
                if len(ip_list) > 0:
                    send_notification(ip_list, mess_noti)
    
        if cpu:
            mess = []
            mess_cpu = get_max_cpu(cpu_max, time_loop)
            for m in mess_cpu:
                mess.append(m)
            if len(mess) > 0:
                mess_noti = ""
                for m in mess:
                    mess_noti+=m+"\n"
                notification.notify(message=mess_noti,timeout=3,)
                if len(ip_list) > 0:
                    send_notification(ip_list, mess_noti)
                
        if mysql_cons:
            mess = []
            mess_mysql_cons = get_mysql_max_connected(mysql_max, time_loop)
            for m in mess_mysql_cons:
                mess.append(m)
            if len(mess) > 0:
                mess_noti = ""
                for m in mess:
                    mess_noti+=m+"\n"
                notification.notify(message=mess_noti,timeout=3,)
                if len(ip_list) > 0:
                    send_notification(ip_list, mess_noti)
                
        if mysql_error:
            mess = []
            mess_mysql_err = get_mysql_error(time_loop)
            for m in mess_mysql_err:
                mess.append(m)
            if len(mess) > 0:
                mess_noti = ""
                for m in mess:
                    mess_noti+=m+"\n"
                notification.notify(message=mess_noti,timeout=3,)
                if len(ip_list) > 0:
                    send_notification(ip_list, mess_noti)
                
        if mongo_cons:
            mess = []
            mess_mongo_cons = get_mongodb_cons(mongo_cons_max, time_loop)
            for m in mess_mongo_cons:
                mess.append(m)
            if len(mess) > 0:
                mess_noti = ""
                for m in mess:
                    mess_noti+=m+"\n"
                notification.notify(message=mess_noti,timeout=3,)
                if len(ip_list) > 0:
                    send_notification(ip_list, mess_noti)
                
        if mongo_lock:
            mess = []
            mess_mongo_lock = get_mongodb_queue(mongo_lock_max, time_loop)
            for m in mess_mongo_lock:
                mess.append(m)
            if len(mess) > 0:
                mess_noti = ""
                for m in mess:
                    mess_noti+=m+"\n"
                notification.notify(message=mess_noti,timeout=3,)
                if len(ip_list) > 0:
                    send_notification(ip_list, mess_noti)
        
        if tomcat_cons:
            mess = []
            mess_t = get_tomcat_total_error(tomcat_max_cons, time_loop)
            for m in mess_t:
                mess.append(m)
            if len(mess) > 0:
                mess_noti = ""
                for m in mess:
                    mess_noti+=m+"\n"
                notification.notify(message=mess_noti,timeout=3,)
                if len(ip_list) > 0:
                    send_notification(ip_list, mess_noti)
            
    except Exception as e:
        QMessageBox.critical(None, "Error", f"Error: {str(e)}")
    
alarm_scheduler = sched.scheduler(time.time, time.sleep)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(889, 857)
        MainWindow.setMinimumSize(QtCore.QSize(709, 517))
        MainWindow.setSizeIncrement(QtCore.QSize(7, 5))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.main_windows = QtWidgets.QStackedWidget(self.centralwidget)
        self.main_windows.setGeometry(QtCore.QRect(20, 0, 841, 671))
        self.main_windows.setSizeIncrement(QtCore.QSize(7, 5))
        self.main_windows.setBaseSize(QtCore.QSize(7, 5))
        self.main_windows.setObjectName("main_windows")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.groupBox = QtWidgets.QGroupBox(self.page)
        self.groupBox.setGeometry(QtCore.QRect(10, 270, 141, 81))
        self.groupBox.setObjectName("groupBox")
        self.widget = QtWidgets.QWidget(self.groupBox)
        self.widget.setGeometry(QtCore.QRect(11, 22, 121, 41))
        self.widget.setObjectName("widget")
        self.gridLayout_13 = QtWidgets.QGridLayout(self.widget)
        self.gridLayout_13.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_13.setObjectName("gridLayout_13")
        self.memoryCheckBox = QtWidgets.QCheckBox(self.widget)
        self.memoryCheckBox.setText("")
        self.memoryCheckBox.setObjectName("memoryCheckBox")
        self.gridLayout_13.addWidget(self.memoryCheckBox, 0, 0, 1, 1)
        self.memory_max = QtWidgets.QDoubleSpinBox(self.widget)
        self.memory_max.setDecimals(1)
        self.memory_max.setMaximum(100.0)
        self.memory_max.setSingleStep(0.1)
        self.memory_max.setProperty("value", 100.0)
        self.memory_max.setObjectName("memory_max")
        self.gridLayout_13.addWidget(self.memory_max, 0, 1, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.widget)
        self.label_2.setObjectName("label_2")
        self.gridLayout_13.addWidget(self.label_2, 0, 2, 1, 1)
        self.endBtn = QtWidgets.QPushButton(self.page)
        self.endBtn.setGeometry(QtCore.QRect(620, 610, 93, 28))
        self.endBtn.setObjectName("endBtn")
        self.groupBox_4 = QtWidgets.QGroupBox(self.page)
        self.groupBox_4.setGeometry(QtCore.QRect(10, 20, 821, 161))
        self.groupBox_4.setObjectName("groupBox_4")
        self.layoutWidget = QtWidgets.QWidget(self.groupBox_4)
        self.layoutWidget.setGeometry(QtCore.QRect(10, 20, 801, 121))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.gridLayout_2 = QtWidgets.QGridLayout()
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.label_4 = QtWidgets.QLabel(self.layoutWidget)
        self.label_4.setObjectName("label_4")
        self.gridLayout_2.addWidget(self.label_4, 0, 0, 1, 1)
        self.eHosts = QtWidgets.QLineEdit(self.layoutWidget)
        self.eHosts.setObjectName("eHosts")
        self.gridLayout_2.addWidget(self.eHosts, 0, 1, 1, 1)
        self.verticalLayout.addLayout(self.gridLayout_2)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.label_5 = QtWidgets.QLabel(self.layoutWidget)
        self.label_5.setObjectName("label_5")
        self.gridLayout.addWidget(self.label_5, 0, 0, 1, 1)
        self.eUser = QtWidgets.QLineEdit(self.layoutWidget)
        self.eUser.setObjectName("eUser")
        self.gridLayout.addWidget(self.eUser, 0, 1, 1, 1)
        self.label_6 = QtWidgets.QLabel(self.layoutWidget)
        self.label_6.setObjectName("label_6")
        self.gridLayout.addWidget(self.label_6, 0, 2, 1, 1)
        self.ePassword = QtWidgets.QLineEdit(self.layoutWidget)
        self.ePassword.setText("")
        self.ePassword.setObjectName("ePassword")
        self.gridLayout.addWidget(self.ePassword, 0, 3, 1, 1)
        self.verticalLayout.addLayout(self.gridLayout)
        self.groupBox_2 = QtWidgets.QGroupBox(self.page)
        self.groupBox_2.setGeometry(QtCore.QRect(180, 270, 141, 81))
        self.groupBox_2.setObjectName("groupBox_2")
        self.widget1 = QtWidgets.QWidget(self.groupBox_2)
        self.widget1.setGeometry(QtCore.QRect(11, 24, 121, 41))
        self.widget1.setObjectName("widget1")
        self.gridLayout_14 = QtWidgets.QGridLayout(self.widget1)
        self.gridLayout_14.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_14.setObjectName("gridLayout_14")
        self.cpu_check = QtWidgets.QCheckBox(self.widget1)
        self.cpu_check.setText("")
        self.cpu_check.setObjectName("cpu_check")
        self.gridLayout_14.addWidget(self.cpu_check, 0, 0, 1, 1)
        self.cpu_max = QtWidgets.QDoubleSpinBox(self.widget1)
        self.cpu_max.setDecimals(1)
        self.cpu_max.setMaximum(100.0)
        self.cpu_max.setSingleStep(0.1)
        self.cpu_max.setProperty("value", 100.0)
        self.cpu_max.setObjectName("cpu_max")
        self.gridLayout_14.addWidget(self.cpu_max, 0, 1, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.widget1)
        self.label_3.setObjectName("label_3")
        self.gridLayout_14.addWidget(self.label_3, 0, 2, 1, 1)
        self.closeBtn = QtWidgets.QPushButton(self.page)
        self.closeBtn.setGeometry(QtCore.QRect(740, 610, 93, 28))
        self.closeBtn.setObjectName("closeBtn")
        self.groupBox_3 = QtWidgets.QGroupBox(self.page)
        self.groupBox_3.setGeometry(QtCore.QRect(20, 590, 171, 51))
        self.groupBox_3.setObjectName("groupBox_3")
        self.timeSpinBox = QtWidgets.QDoubleSpinBox(self.groupBox_3)
        self.timeSpinBox.setGeometry(QtCore.QRect(10, 21, 81, 20))
        self.timeSpinBox.setDecimals(0)
        self.timeSpinBox.setMinimum(1.0)
        self.timeSpinBox.setMaximum(3600.0)
        self.timeSpinBox.setSingleStep(1.0)
        self.timeSpinBox.setProperty("value", 10.0)
        self.timeSpinBox.setObjectName("timeSpinBox")
        self.label = QtWidgets.QLabel(self.groupBox_3)
        self.label.setGeometry(QtCore.QRect(100, 20, 55, 21))
        self.label.setObjectName("label")
        self.startBtn = QtWidgets.QPushButton(self.page)
        self.startBtn.setGeometry(QtCore.QRect(500, 610, 93, 28))
        self.startBtn.setObjectName("startBtn")
        self.groupBox_12 = QtWidgets.QGroupBox(self.page)
        self.groupBox_12.setGeometry(QtCore.QRect(10, 190, 821, 64))
        self.groupBox_12.setObjectName("groupBox_12")
        self.layoutWidget1 = QtWidgets.QWidget(self.groupBox_12)
        self.layoutWidget1.setGeometry(QtCore.QRect(13, 29, 801, 24))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.gridLayout_12 = QtWidgets.QGridLayout(self.layoutWidget1)
        self.gridLayout_12.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_12.setObjectName("gridLayout_12")
        self.label_23 = QtWidgets.QLabel(self.layoutWidget1)
        self.label_23.setObjectName("label_23")
        self.gridLayout_12.addWidget(self.label_23, 0, 0, 1, 1)
        self.eIPNoti = QtWidgets.QLineEdit(self.layoutWidget1)
        self.eIPNoti.setObjectName("eIPNoti")
        self.gridLayout_12.addWidget(self.eIPNoti, 0, 1, 1, 1)
        self.groupBox_13 = QtWidgets.QGroupBox(self.page)
        self.groupBox_13.setGeometry(QtCore.QRect(10, 380, 361, 81))
        self.groupBox_13.setObjectName("groupBox_13")
        self.mysql_error_check = QtWidgets.QCheckBox(self.groupBox_13)
        self.mysql_error_check.setGeometry(QtCore.QRect(250, 30, 91, 21))
        self.mysql_error_check.setObjectName("mysql_error_check")
        self.widget2 = QtWidgets.QWidget(self.groupBox_13)
        self.widget2.setGeometry(QtCore.QRect(11, 20, 211, 41))
        self.widget2.setObjectName("widget2")
        self.gridLayout_10 = QtWidgets.QGridLayout(self.widget2)
        self.gridLayout_10.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_10.setObjectName("gridLayout_10")
        self.mysql_cons_check = QtWidgets.QCheckBox(self.widget2)
        self.mysql_cons_check.setObjectName("mysql_cons_check")
        self.gridLayout_10.addWidget(self.mysql_cons_check, 0, 0, 1, 1)
        self.mysql_max_cons = QtWidgets.QDoubleSpinBox(self.widget2)
        self.mysql_max_cons.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.mysql_max_cons.setDecimals(0)
        self.mysql_max_cons.setMinimum(1.0)
        self.mysql_max_cons.setMaximum(10000.0)
        self.mysql_max_cons.setSingleStep(1.0)
        self.mysql_max_cons.setProperty("value", 200.0)
        self.mysql_max_cons.setObjectName("mysql_max_cons")
        self.gridLayout_10.addWidget(self.mysql_max_cons, 0, 1, 1, 1)
        self.groupBox_14 = QtWidgets.QGroupBox(self.page)
        self.groupBox_14.setGeometry(QtCore.QRect(400, 380, 431, 81))
        self.groupBox_14.setObjectName("groupBox_14")
        self.layoutWidget_9 = QtWidgets.QWidget(self.groupBox_14)
        self.layoutWidget_9.setGeometry(QtCore.QRect(240, 20, 220, 41))
        self.layoutWidget_9.setObjectName("layoutWidget_9")
        self.gridLayout_16 = QtWidgets.QGridLayout(self.layoutWidget_9)
        self.gridLayout_16.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_16.setObjectName("gridLayout_16")
        self.tomcat_percent_check = QtWidgets.QCheckBox(self.layoutWidget_9)
        self.tomcat_percent_check.setObjectName("tomcat_percent_check")
        self.gridLayout_16.addWidget(self.tomcat_percent_check, 0, 0, 1, 1)
        self.tomcat_percent = QtWidgets.QDoubleSpinBox(self.layoutWidget_9)
        self.tomcat_percent.setDecimals(1)
        self.tomcat_percent.setMaximum(100.0)
        self.tomcat_percent.setSingleStep(0.1)
        self.tomcat_percent.setProperty("value", 100.0)
        self.tomcat_percent.setObjectName("tomcat_percent")
        self.gridLayout_16.addWidget(self.tomcat_percent, 0, 1, 1, 1)
        self.label_18 = QtWidgets.QLabel(self.layoutWidget_9)
        self.label_18.setObjectName("label_18")
        self.gridLayout_16.addWidget(self.label_18, 0, 2, 1, 1)
        self.widget3 = QtWidgets.QWidget(self.groupBox_14)
        self.widget3.setGeometry(QtCore.QRect(11, 20, 161, 41))
        self.widget3.setObjectName("widget3")
        self.gridLayout_15 = QtWidgets.QGridLayout(self.widget3)
        self.gridLayout_15.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_15.setObjectName("gridLayout_15")
        self.tomcat_maxerr_check = QtWidgets.QCheckBox(self.widget3)
        self.tomcat_maxerr_check.setObjectName("tomcat_maxerr_check")
        self.gridLayout_15.addWidget(self.tomcat_maxerr_check, 0, 0, 1, 1)
        self.tomcat_maxerr = QtWidgets.QDoubleSpinBox(self.widget3)
        self.tomcat_maxerr.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.tomcat_maxerr.setDecimals(0)
        self.tomcat_maxerr.setMinimum(1.0)
        self.tomcat_maxerr.setMaximum(10000.0)
        self.tomcat_maxerr.setSingleStep(1.0)
        self.tomcat_maxerr.setProperty("value", 200.0)
        self.tomcat_maxerr.setObjectName("tomcat_maxerr")
        self.gridLayout_15.addWidget(self.tomcat_maxerr, 0, 1, 1, 1)
        self.groupBox_15 = QtWidgets.QGroupBox(self.page)
        self.groupBox_15.setGeometry(QtCore.QRect(350, 270, 481, 81))
        self.groupBox_15.setObjectName("groupBox_15")
        self.layoutWidget_10 = QtWidgets.QWidget(self.groupBox_15)
        self.layoutWidget_10.setGeometry(QtCore.QRect(290, 20, 181, 41))
        self.layoutWidget_10.setObjectName("layoutWidget_10")
        self.gridLayout_18 = QtWidgets.QGridLayout(self.layoutWidget_10)
        self.gridLayout_18.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_18.setObjectName("gridLayout_18")
        self.mongo_lock_check = QtWidgets.QCheckBox(self.layoutWidget_10)
        self.mongo_lock_check.setObjectName("mongo_lock_check")
        self.gridLayout_18.addWidget(self.mongo_lock_check, 0, 0, 1, 1)
        self.mongo_lock = QtWidgets.QDoubleSpinBox(self.layoutWidget_10)
        self.mongo_lock.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.mongo_lock.setDecimals(0)
        self.mongo_lock.setMinimum(1.0)
        self.mongo_lock.setMaximum(10000.0)
        self.mongo_lock.setSingleStep(1.0)
        self.mongo_lock.setProperty("value", 200.0)
        self.mongo_lock.setObjectName("mongo_lock")
        self.gridLayout_18.addWidget(self.mongo_lock, 0, 1, 1, 1)
        self.widget4 = QtWidgets.QWidget(self.groupBox_15)
        self.widget4.setGeometry(QtCore.QRect(11, 20, 241, 41))
        self.widget4.setObjectName("widget4")
        self.gridLayout_11 = QtWidgets.QGridLayout(self.widget4)
        self.gridLayout_11.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_11.setObjectName("gridLayout_11")
        self.mongo_max_con_check = QtWidgets.QCheckBox(self.widget4)
        self.mongo_max_con_check.setObjectName("mongo_max_con_check")
        self.gridLayout_11.addWidget(self.mongo_max_con_check, 0, 0, 1, 1)
        self.mongo_max_cons = QtWidgets.QDoubleSpinBox(self.widget4)
        self.mongo_max_cons.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.mongo_max_cons.setDecimals(0)
        self.mongo_max_cons.setMinimum(1.0)
        self.mongo_max_cons.setMaximum(10000.0)
        self.mongo_max_cons.setSingleStep(1.0)
        self.mongo_max_cons.setProperty("value", 200.0)
        self.mongo_max_cons.setObjectName("mongo_max_cons")
        self.gridLayout_11.addWidget(self.mongo_max_cons, 0, 1, 1, 1)
        self.main_windows.addWidget(self.page)
        self.page_script = QtWidgets.QWidget()
        self.page_script.setObjectName("page_script")
        self.groupBox_5 = QtWidgets.QGroupBox(self.page_script)
        self.groupBox_5.setGeometry(QtCore.QRect(10, 100, 821, 321))
        self.groupBox_5.setObjectName("groupBox_5")
        self.layoutWidget2 = QtWidgets.QWidget(self.groupBox_5)
        self.layoutWidget2.setGeometry(QtCore.QRect(20, 20, 461, 41))
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.layoutWidget2)
        self.horizontalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label_7 = QtWidgets.QLabel(self.layoutWidget2)
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_6.addWidget(self.label_7)
        self.metric_source = QtWidgets.QLineEdit(self.layoutWidget2)
        self.metric_source.setObjectName("metric_source")
        self.horizontalLayout_6.addWidget(self.metric_source)
        self.layoutWidget3 = QtWidgets.QWidget(self.groupBox_5)
        self.layoutWidget3.setGeometry(QtCore.QRect(150, 270, 651, 41))
        self.layoutWidget3.setObjectName("layoutWidget3")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget3)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.metric_conf = QtWidgets.QPushButton(self.layoutWidget3)
        self.metric_conf.setObjectName("metric_conf")
        self.horizontalLayout.addWidget(self.metric_conf)
        self.metri_cmd = QtWidgets.QPushButton(self.layoutWidget3)
        self.metri_cmd.setObjectName("metri_cmd")
        self.horizontalLayout.addWidget(self.metri_cmd)
        self.metric_create_service = QtWidgets.QPushButton(self.layoutWidget3)
        self.metric_create_service.setObjectName("metric_create_service")
        self.horizontalLayout.addWidget(self.metric_create_service)
        self.metric_start = QtWidgets.QPushButton(self.layoutWidget3)
        self.metric_start.setObjectName("metric_start")
        self.horizontalLayout.addWidget(self.metric_start)
        self.metric_stop = QtWidgets.QPushButton(self.layoutWidget3)
        self.metric_stop.setObjectName("metric_stop")
        self.horizontalLayout.addWidget(self.metric_stop)
        self.metric_del = QtWidgets.QPushButton(self.layoutWidget3)
        self.metric_del.setObjectName("metric_del")
        self.horizontalLayout.addWidget(self.metric_del)
        self.layoutWidget4 = QtWidgets.QWidget(self.groupBox_5)
        self.layoutWidget4.setGeometry(QtCore.QRect(490, 20, 291, 41))
        self.layoutWidget4.setObjectName("layoutWidget4")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.layoutWidget4)
        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.label_9 = QtWidgets.QLabel(self.layoutWidget4)
        self.label_9.setObjectName("label_9")
        self.horizontalLayout_7.addWidget(self.label_9)
        self.metric_name = QtWidgets.QLineEdit(self.layoutWidget4)
        self.metric_name.setObjectName("metric_name")
        self.horizontalLayout_7.addWidget(self.metric_name)
        self.layoutWidget5 = QtWidgets.QWidget(self.groupBox_5)
        self.layoutWidget5.setGeometry(QtCore.QRect(20, 80, 761, 51))
        self.layoutWidget5.setObjectName("layoutWidget5")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.layoutWidget5)
        self.gridLayout_5.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.label_8 = QtWidgets.QLabel(self.layoutWidget5)
        self.label_8.setObjectName("label_8")
        self.gridLayout_5.addWidget(self.label_8, 0, 0, 1, 1)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.metric_system = QtWidgets.QCheckBox(self.layoutWidget5)
        self.metric_system.setTristate(False)
        self.metric_system.setObjectName("metric_system")
        self.horizontalLayout_2.addWidget(self.metric_system)
        self.metric_tomcat = QtWidgets.QCheckBox(self.layoutWidget5)
        self.metric_tomcat.setObjectName("metric_tomcat")
        self.horizontalLayout_2.addWidget(self.metric_tomcat)
        self.metric_mysql = QtWidgets.QCheckBox(self.layoutWidget5)
        self.metric_mysql.setObjectName("metric_mysql")
        self.horizontalLayout_2.addWidget(self.metric_mysql)
        self.metric_mongo = QtWidgets.QCheckBox(self.layoutWidget5)
        self.metric_mongo.setObjectName("metric_mongo")
        self.horizontalLayout_2.addWidget(self.metric_mongo)
        self.metric_other = QtWidgets.QCheckBox(self.layoutWidget5)
        self.metric_other.setObjectName("metric_other")
        self.horizontalLayout_2.addWidget(self.metric_other)
        self.gridLayout_5.addLayout(self.horizontalLayout_2, 0, 1, 1, 1)
        self.metric_other_module = QtWidgets.QLineEdit(self.layoutWidget5)
        self.metric_other_module.setObjectName("metric_other_module")
        self.gridLayout_5.addWidget(self.metric_other_module, 0, 2, 1, 1)
        self.layoutWidget_4 = QtWidgets.QWidget(self.groupBox_5)
        self.layoutWidget_4.setGeometry(QtCore.QRect(20, 140, 761, 31))
        self.layoutWidget_4.setObjectName("layoutWidget_4")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.layoutWidget_4)
        self.horizontalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.label_14 = QtWidgets.QLabel(self.layoutWidget_4)
        self.label_14.setObjectName("label_14")
        self.horizontalLayout_10.addWidget(self.label_14)
        self.g_tomcat_host = QtWidgets.QLineEdit(self.layoutWidget_4)
        self.g_tomcat_host.setText("")
        self.g_tomcat_host.setObjectName("g_tomcat_host")
        self.horizontalLayout_10.addWidget(self.g_tomcat_host)
        self.layoutWidget_6 = QtWidgets.QWidget(self.groupBox_5)
        self.layoutWidget_6.setGeometry(QtCore.QRect(20, 220, 761, 31))
        self.layoutWidget_6.setObjectName("layoutWidget_6")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout(self.layoutWidget_6)
        self.horizontalLayout_13.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.label_17 = QtWidgets.QLabel(self.layoutWidget_6)
        self.label_17.setObjectName("label_17")
        self.horizontalLayout_13.addWidget(self.label_17)
        self.g_mongodb_host = QtWidgets.QLineEdit(self.layoutWidget_6)
        self.g_mongodb_host.setText("")
        self.g_mongodb_host.setObjectName("g_mongodb_host")
        self.horizontalLayout_13.addWidget(self.g_mongodb_host)
        self.layoutWidget_5 = QtWidgets.QWidget(self.groupBox_5)
        self.layoutWidget_5.setGeometry(QtCore.QRect(20, 180, 761, 31))
        self.layoutWidget_5.setObjectName("layoutWidget_5")
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout(self.layoutWidget_5)
        self.horizontalLayout_12.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.label_16 = QtWidgets.QLabel(self.layoutWidget_5)
        self.label_16.setObjectName("label_16")
        self.horizontalLayout_12.addWidget(self.label_16)
        self.g_mysql_host = QtWidgets.QLineEdit(self.layoutWidget_5)
        self.g_mysql_host.setText("")
        self.g_mysql_host.setObjectName("g_mysql_host")
        self.horizontalLayout_12.addWidget(self.g_mysql_host)
        self.groupBox_6 = QtWidgets.QGroupBox(self.page_script)
        self.groupBox_6.setGeometry(QtCore.QRect(10, 430, 821, 271))
        self.groupBox_6.setObjectName("groupBox_6")
        self.layoutWidget_2 = QtWidgets.QWidget(self.groupBox_6)
        self.layoutWidget_2.setGeometry(QtCore.QRect(150, 200, 651, 51))
        self.layoutWidget_2.setObjectName("layoutWidget_2")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.layoutWidget_2)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.filebeat_conf = QtWidgets.QPushButton(self.layoutWidget_2)
        self.filebeat_conf.setObjectName("filebeat_conf")
        self.horizontalLayout_4.addWidget(self.filebeat_conf)
        self.filebeat_cmd = QtWidgets.QPushButton(self.layoutWidget_2)
        self.filebeat_cmd.setObjectName("filebeat_cmd")
        self.horizontalLayout_4.addWidget(self.filebeat_cmd)
        self.filebeat_service = QtWidgets.QPushButton(self.layoutWidget_2)
        self.filebeat_service.setObjectName("filebeat_service")
        self.horizontalLayout_4.addWidget(self.filebeat_service)
        self.filebeat_start = QtWidgets.QPushButton(self.layoutWidget_2)
        self.filebeat_start.setObjectName("filebeat_start")
        self.horizontalLayout_4.addWidget(self.filebeat_start)
        self.filebeat_stop = QtWidgets.QPushButton(self.layoutWidget_2)
        self.filebeat_stop.setObjectName("filebeat_stop")
        self.horizontalLayout_4.addWidget(self.filebeat_stop)
        self.filebeat_del = QtWidgets.QPushButton(self.layoutWidget_2)
        self.filebeat_del.setObjectName("filebeat_del")
        self.horizontalLayout_4.addWidget(self.filebeat_del)
        self.layoutWidget6 = QtWidgets.QWidget(self.groupBox_6)
        self.layoutWidget6.setGeometry(QtCore.QRect(20, 20, 461, 41))
        self.layoutWidget6.setObjectName("layoutWidget6")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.layoutWidget6)
        self.horizontalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.label_10 = QtWidgets.QLabel(self.layoutWidget6)
        self.label_10.setObjectName("label_10")
        self.horizontalLayout_8.addWidget(self.label_10)
        self.filebeat_source = QtWidgets.QLineEdit(self.layoutWidget6)
        self.filebeat_source.setText("")
        self.filebeat_source.setObjectName("filebeat_source")
        self.horizontalLayout_8.addWidget(self.filebeat_source)
        self.layoutWidget7 = QtWidgets.QWidget(self.groupBox_6)
        self.layoutWidget7.setGeometry(QtCore.QRect(490, 20, 291, 41))
        self.layoutWidget7.setObjectName("layoutWidget7")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.layoutWidget7)
        self.horizontalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.label_12 = QtWidgets.QLabel(self.layoutWidget7)
        self.label_12.setObjectName("label_12")
        self.horizontalLayout_9.addWidget(self.label_12)
        self.filebeat_name = QtWidgets.QLineEdit(self.layoutWidget7)
        self.filebeat_name.setObjectName("filebeat_name")
        self.horizontalLayout_9.addWidget(self.filebeat_name)
        self.layoutWidget_7 = QtWidgets.QWidget(self.groupBox_6)
        self.layoutWidget_7.setGeometry(QtCore.QRect(20, 120, 761, 31))
        self.layoutWidget_7.setObjectName("layoutWidget_7")
        self.horizontalLayout_17 = QtWidgets.QHBoxLayout(self.layoutWidget_7)
        self.horizontalLayout_17.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        self.label_21 = QtWidgets.QLabel(self.layoutWidget_7)
        self.label_21.setObjectName("label_21")
        self.horizontalLayout_17.addWidget(self.label_21)
        self.filebeat_tomcat_path = QtWidgets.QLineEdit(self.layoutWidget_7)
        self.filebeat_tomcat_path.setText("")
        self.filebeat_tomcat_path.setObjectName("filebeat_tomcat_path")
        self.horizontalLayout_17.addWidget(self.filebeat_tomcat_path)
        self.layoutWidget_8 = QtWidgets.QWidget(self.groupBox_6)
        self.layoutWidget_8.setGeometry(QtCore.QRect(20, 160, 761, 31))
        self.layoutWidget_8.setObjectName("layoutWidget_8")
        self.horizontalLayout_18 = QtWidgets.QHBoxLayout(self.layoutWidget_8)
        self.horizontalLayout_18.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_18.setObjectName("horizontalLayout_18")
        self.label_22 = QtWidgets.QLabel(self.layoutWidget_8)
        self.label_22.setObjectName("label_22")
        self.horizontalLayout_18.addWidget(self.label_22)
        self.filebeat_mysql_path = QtWidgets.QLineEdit(self.layoutWidget_8)
        self.filebeat_mysql_path.setText("")
        self.filebeat_mysql_path.setObjectName("filebeat_mysql_path")
        self.horizontalLayout_18.addWidget(self.filebeat_mysql_path)
        self.layoutWidget8 = QtWidgets.QWidget(self.groupBox_6)
        self.layoutWidget8.setGeometry(QtCore.QRect(20, 70, 321, 41))
        self.layoutWidget8.setObjectName("layoutWidget8")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.layoutWidget8)
        self.gridLayout_6.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.label_11 = QtWidgets.QLabel(self.layoutWidget8)
        self.label_11.setObjectName("label_11")
        self.gridLayout_6.addWidget(self.label_11, 0, 0, 1, 1)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.filebeat_tomcat = QtWidgets.QCheckBox(self.layoutWidget8)
        self.filebeat_tomcat.setObjectName("filebeat_tomcat")
        self.horizontalLayout_3.addWidget(self.filebeat_tomcat)
        self.filebeat_mysql = QtWidgets.QCheckBox(self.layoutWidget8)
        self.filebeat_mysql.setObjectName("filebeat_mysql")
        self.horizontalLayout_3.addWidget(self.filebeat_mysql)
        self.filebeat_other = QtWidgets.QCheckBox(self.layoutWidget8)
        self.filebeat_other.setObjectName("filebeat_other")
        self.horizontalLayout_3.addWidget(self.filebeat_other)
        self.gridLayout_6.addLayout(self.horizontalLayout_3, 0, 1, 1, 1)
        self.groupBox_7 = QtWidgets.QGroupBox(self.page_script)
        self.groupBox_7.setGeometry(QtCore.QRect(10, 10, 821, 81))
        self.groupBox_7.setObjectName("groupBox_7")
        self.layoutWidget9 = QtWidgets.QWidget(self.groupBox_7)
        self.layoutWidget9.setGeometry(QtCore.QRect(20, 21, 461, 41))
        self.layoutWidget9.setObjectName("layoutWidget9")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.layoutWidget9)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_13 = QtWidgets.QLabel(self.layoutWidget9)
        self.label_13.setObjectName("label_13")
        self.horizontalLayout_5.addWidget(self.label_13)
        self.g_logstash_name = QtWidgets.QLineEdit(self.layoutWidget9)
        self.g_logstash_name.setText("")
        self.g_logstash_name.setObjectName("g_logstash_name")
        self.horizontalLayout_5.addWidget(self.g_logstash_name)
        self.layoutWidget_3 = QtWidgets.QWidget(self.groupBox_7)
        self.layoutWidget_3.setGeometry(QtCore.QRect(490, 20, 291, 41))
        self.layoutWidget_3.setObjectName("layoutWidget_3")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.layoutWidget_3)
        self.horizontalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.label_15 = QtWidgets.QLabel(self.layoutWidget_3)
        self.label_15.setObjectName("label_15")
        self.horizontalLayout_11.addWidget(self.label_15)
        self.g_logstash_host = QtWidgets.QLineEdit(self.layoutWidget_3)
        self.g_logstash_host.setInputMask("")
        self.g_logstash_host.setObjectName("g_logstash_host")
        self.horizontalLayout_11.addWidget(self.g_logstash_host)
        self.main_windows.addWidget(self.page_script)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.groupBox_8 = QtWidgets.QGroupBox(self.page_2)
        self.groupBox_8.setGeometry(QtCore.QRect(10, 10, 831, 681))
        self.groupBox_8.setObjectName("groupBox_8")
        self.layoutWidget_27 = QtWidgets.QWidget(self.groupBox_8)
        self.layoutWidget_27.setGeometry(QtCore.QRect(150, 620, 651, 51))
        self.layoutWidget_27.setObjectName("layoutWidget_27")
        self.horizontalLayout_37 = QtWidgets.QHBoxLayout(self.layoutWidget_27)
        self.horizontalLayout_37.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_37.setObjectName("horizontalLayout_37")
        self.logstash_config = QtWidgets.QPushButton(self.layoutWidget_27)
        self.logstash_config.setObjectName("logstash_config")
        self.horizontalLayout_37.addWidget(self.logstash_config)
        self.logstash_cmd = QtWidgets.QPushButton(self.layoutWidget_27)
        self.logstash_cmd.setObjectName("logstash_cmd")
        self.horizontalLayout_37.addWidget(self.logstash_cmd)
        self.logstash_service = QtWidgets.QPushButton(self.layoutWidget_27)
        self.logstash_service.setObjectName("logstash_service")
        self.horizontalLayout_37.addWidget(self.logstash_service)
        self.logstash_start = QtWidgets.QPushButton(self.layoutWidget_27)
        self.logstash_start.setObjectName("logstash_start")
        self.horizontalLayout_37.addWidget(self.logstash_start)
        self.logstash_stop = QtWidgets.QPushButton(self.layoutWidget_27)
        self.logstash_stop.setObjectName("logstash_stop")
        self.horizontalLayout_37.addWidget(self.logstash_stop)
        self.logstash_del = QtWidgets.QPushButton(self.layoutWidget_27)
        self.logstash_del.setObjectName("logstash_del")
        self.horizontalLayout_37.addWidget(self.logstash_del)
        self.groupBox_9 = QtWidgets.QGroupBox(self.groupBox_8)
        self.groupBox_9.setGeometry(QtCore.QRect(20, 230, 781, 101))
        self.groupBox_9.setObjectName("groupBox_9")
        self.logstash_other_input = QtWidgets.QPlainTextEdit(self.groupBox_9)
        self.logstash_other_input.setGeometry(QtCore.QRect(10, 20, 761, 71))
        self.logstash_other_input.setObjectName("logstash_other_input")
        self.groupBox_10 = QtWidgets.QGroupBox(self.groupBox_8)
        self.groupBox_10.setGeometry(QtCore.QRect(20, 330, 781, 141))
        self.groupBox_10.setObjectName("groupBox_10")
        self.logstash_other_filter = QtWidgets.QPlainTextEdit(self.groupBox_10)
        self.logstash_other_filter.setGeometry(QtCore.QRect(10, 20, 761, 111))
        self.logstash_other_filter.setObjectName("logstash_other_filter")
        self.groupBox_11 = QtWidgets.QGroupBox(self.groupBox_8)
        self.groupBox_11.setGeometry(QtCore.QRect(20, 480, 781, 141))
        self.groupBox_11.setObjectName("groupBox_11")
        self.logstash_other_output = QtWidgets.QPlainTextEdit(self.groupBox_11)
        self.logstash_other_output.setGeometry(QtCore.QRect(10, 20, 761, 111))
        self.logstash_other_output.setObjectName("logstash_other_output")
        self.layoutWidget10 = QtWidgets.QWidget(self.groupBox_8)
        self.layoutWidget10.setGeometry(QtCore.QRect(20, 31, 781, 191))
        self.layoutWidget10.setObjectName("layoutWidget10")
        self.gridLayout_9 = QtWidgets.QGridLayout(self.layoutWidget10)
        self.gridLayout_9.setContentsMargins(0, 0, 0, 0)
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.horizontalLayout_34 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_34.setObjectName("horizontalLayout_34")
        self.label_36 = QtWidgets.QLabel(self.layoutWidget10)
        self.label_36.setObjectName("label_36")
        self.horizontalLayout_34.addWidget(self.label_36)
        self.logstash_source = QtWidgets.QLineEdit(self.layoutWidget10)
        self.logstash_source.setText("")
        self.logstash_source.setObjectName("logstash_source")
        self.horizontalLayout_34.addWidget(self.logstash_source)
        self.gridLayout_9.addLayout(self.horizontalLayout_34, 0, 0, 1, 1)
        self.horizontalLayout_36 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_36.setObjectName("horizontalLayout_36")
        self.label_37 = QtWidgets.QLabel(self.layoutWidget10)
        self.label_37.setObjectName("label_37")
        self.horizontalLayout_36.addWidget(self.label_37)
        self.logstash_name = QtWidgets.QLineEdit(self.layoutWidget10)
        self.logstash_name.setObjectName("logstash_name")
        self.horizontalLayout_36.addWidget(self.logstash_name)
        self.gridLayout_9.addLayout(self.horizontalLayout_36, 0, 1, 1, 1)
        self.gridLayout_3 = QtWidgets.QGridLayout()
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.label_38 = QtWidgets.QLabel(self.layoutWidget10)
        self.label_38.setObjectName("label_38")
        self.gridLayout_3.addWidget(self.label_38, 0, 0, 1, 1)
        self.horizontalLayout_35 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_35.setObjectName("horizontalLayout_35")
        self.logstash_sys = QtWidgets.QCheckBox(self.layoutWidget10)
        self.logstash_sys.setObjectName("logstash_sys")
        self.horizontalLayout_35.addWidget(self.logstash_sys)
        self.logstash_tomcat = QtWidgets.QCheckBox(self.layoutWidget10)
        self.logstash_tomcat.setObjectName("logstash_tomcat")
        self.horizontalLayout_35.addWidget(self.logstash_tomcat)
        self.logstash_mysql = QtWidgets.QCheckBox(self.layoutWidget10)
        self.logstash_mysql.setObjectName("logstash_mysql")
        self.horizontalLayout_35.addWidget(self.logstash_mysql)
        self.logstash_mongodb = QtWidgets.QCheckBox(self.layoutWidget10)
        self.logstash_mongodb.setObjectName("logstash_mongodb")
        self.horizontalLayout_35.addWidget(self.logstash_mongodb)
        self.logstash_other = QtWidgets.QCheckBox(self.layoutWidget10)
        self.logstash_other.setObjectName("logstash_other")
        self.horizontalLayout_35.addWidget(self.logstash_other)
        self.gridLayout_3.addLayout(self.horizontalLayout_35, 0, 1, 1, 1)
        self.gridLayout_9.addLayout(self.gridLayout_3, 1, 0, 1, 1)
        self.horizontalLayout_38 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_38.setObjectName("horizontalLayout_38")
        self.label_39 = QtWidgets.QLabel(self.layoutWidget10)
        self.label_39.setObjectName("label_39")
        self.horizontalLayout_38.addWidget(self.label_39)
        self.logstash_input_port = QtWidgets.QLineEdit(self.layoutWidget10)
        self.logstash_input_port.setObjectName("logstash_input_port")
        self.horizontalLayout_38.addWidget(self.logstash_input_port)
        self.gridLayout_9.addLayout(self.horizontalLayout_38, 1, 1, 1, 1)
        self.horizontalLayout_39 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_39.setObjectName("horizontalLayout_39")
        self.label_40 = QtWidgets.QLabel(self.layoutWidget10)
        self.label_40.setObjectName("label_40")
        self.horizontalLayout_39.addWidget(self.label_40)
        self.e_host = QtWidgets.QLineEdit(self.layoutWidget10)
        self.e_host.setObjectName("e_host")
        self.horizontalLayout_39.addWidget(self.e_host)
        self.gridLayout_9.addLayout(self.horizontalLayout_39, 2, 0, 1, 2)
        self.gridLayout_7 = QtWidgets.QGridLayout()
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.gridLayout_4 = QtWidgets.QGridLayout()
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.horizontalLayout_40 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_40.setObjectName("horizontalLayout_40")
        self.label_42 = QtWidgets.QLabel(self.layoutWidget10)
        self.label_42.setObjectName("label_42")
        self.horizontalLayout_40.addWidget(self.label_42)
        self.e_user = QtWidgets.QLineEdit(self.layoutWidget10)
        self.e_user.setText("")
        self.e_user.setPlaceholderText("")
        self.e_user.setObjectName("e_user")
        self.horizontalLayout_40.addWidget(self.e_user)
        self.gridLayout_4.addLayout(self.horizontalLayout_40, 0, 0, 1, 1)
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.label_41 = QtWidgets.QLabel(self.layoutWidget10)
        self.label_41.setObjectName("label_41")
        self.horizontalLayout_14.addWidget(self.label_41)
        self.e_pass = QtWidgets.QLineEdit(self.layoutWidget10)
        self.e_pass.setText("")
        self.e_pass.setPlaceholderText("")
        self.e_pass.setObjectName("e_pass")
        self.horizontalLayout_14.addWidget(self.e_pass)
        self.gridLayout_4.addLayout(self.horizontalLayout_14, 0, 1, 1, 1)
        self.gridLayout_7.addLayout(self.gridLayout_4, 0, 0, 1, 1)
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.label_43 = QtWidgets.QLabel(self.layoutWidget10)
        self.label_43.setObjectName("label_43")
        self.horizontalLayout_15.addWidget(self.label_43)
        self.e_cloud_id = QtWidgets.QLineEdit(self.layoutWidget10)
        self.e_cloud_id.setText("")
        self.e_cloud_id.setPlaceholderText("")
        self.e_cloud_id.setObjectName("e_cloud_id")
        self.horizontalLayout_15.addWidget(self.e_cloud_id)
        self.gridLayout_7.addLayout(self.horizontalLayout_15, 0, 1, 1, 1)
        self.gridLayout_9.addLayout(self.gridLayout_7, 3, 0, 1, 2)
        self.gridLayout_8 = QtWidgets.QGridLayout()
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.label_44 = QtWidgets.QLabel(self.layoutWidget10)
        self.label_44.setObjectName("label_44")
        self.horizontalLayout_16.addWidget(self.label_44)
        self.e_cloud_auth = QtWidgets.QLineEdit(self.layoutWidget10)
        self.e_cloud_auth.setText("")
        self.e_cloud_auth.setPlaceholderText("")
        self.e_cloud_auth.setObjectName("e_cloud_auth")
        self.horizontalLayout_16.addWidget(self.e_cloud_auth)
        self.gridLayout_8.addLayout(self.horizontalLayout_16, 0, 0, 1, 1)
        self.horizontalLayout_19 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_19.setObjectName("horizontalLayout_19")
        self.label_45 = QtWidgets.QLabel(self.layoutWidget10)
        self.label_45.setObjectName("label_45")
        self.horizontalLayout_19.addWidget(self.label_45)
        self.logstash_name_5 = QtWidgets.QLineEdit(self.layoutWidget10)
        self.logstash_name_5.setText("")
        self.logstash_name_5.setPlaceholderText("")
        self.logstash_name_5.setObjectName("logstash_name_5")
        self.horizontalLayout_19.addWidget(self.logstash_name_5)
        self.gridLayout_8.addLayout(self.horizontalLayout_19, 0, 1, 1, 1)
        self.gridLayout_9.addLayout(self.gridLayout_8, 4, 0, 1, 2)
        self.main_windows.addWidget(self.page_2)
        self.g_console = QtWidgets.QTextEdit(self.centralwidget)
        self.g_console.setGeometry(QtCore.QRect(40, 676, 811, 141))
        self.g_console.setReadOnly(True)
        self.g_console.setObjectName("g_console")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 889, 26))
        self.menubar.setObjectName("menubar")
        self.menu_Main = QtWidgets.QMenu(self.menubar)
        self.menu_Main.setObjectName("menu_Main")
        self.menu_Config = QtWidgets.QMenu(self.menubar)
        self.menu_Config.setObjectName("menu_Config")
        MainWindow.setMenuBar(self.menubar)
        self.action_Logstash = QtWidgets.QAction(MainWindow)
        self.action_Logstash.setObjectName("action_Logstash")
        self.action_Beat = QtWidgets.QAction(MainWindow)
        self.action_Beat.setObjectName("action_Beat")
        self.action_metricbeat = QtWidgets.QAction(MainWindow)
        self.action_metricbeat.setObjectName("action_metricbeat")
        self.action_Alert = QtWidgets.QAction(MainWindow)
        self.action_Alert.setObjectName("action_Alert")
        self.action_Elasticsearch = QtWidgets.QAction(MainWindow)
        self.action_Elasticsearch.setObjectName("action_Elasticsearch")
        self.action_Kibana = QtWidgets.QAction(MainWindow)
        self.action_Kibana.setObjectName("action_Kibana")
        self.action_Logstash_2 = QtWidgets.QAction(MainWindow)
        self.action_Logstash_2.setObjectName("action_Logstash_2")
        self.action_Filebeat_2 = QtWidgets.QAction(MainWindow)
        self.action_Filebeat_2.setObjectName("action_Filebeat_2")
        self.actionMetricbeat = QtWidgets.QAction(MainWindow)
        self.actionMetricbeat.setObjectName("actionMetricbeat")
        self.menu_Main.addAction(self.action_Alert)
        self.menu_Config.addAction(self.action_Logstash)
        self.menu_Config.addAction(self.action_Beat)
        self.menubar.addAction(self.menu_Main.menuAction())
        self.menubar.addAction(self.menu_Config.menuAction())
        
        # Tạo các QAction để chuyển đổi giữa các trang
        self.setAction()

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Tool config ELK"))
        self.groupBox.setTitle(_translate("MainWindow", "Memory"))
        self.label_2.setText(_translate("MainWindow", "%"))
        self.endBtn.setText(_translate("MainWindow", "End"))
        self.groupBox_4.setTitle(_translate("MainWindow", "Elasticsearch config"))
        self.label_4.setText(_translate("MainWindow", "Hosts       "))
        self.eHosts.setText(_translate("MainWindow", "https://localhost:9200/"))
        self.eHosts.setPlaceholderText(_translate("MainWindow", "https://localhost:9200/"))
        self.label_5.setText(_translate("MainWindow", "User name"))
        self.eUser.setText(_translate("MainWindow", "elastic"))
        self.eUser.setPlaceholderText(_translate("MainWindow", "elastic"))
        self.label_6.setText(_translate("MainWindow", "Password"))
        self.groupBox_2.setTitle(_translate("MainWindow", "CPU"))
        self.label_3.setText(_translate("MainWindow", "%"))
        self.closeBtn.setText(_translate("MainWindow", "Close"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Time"))
        self.label.setText(_translate("MainWindow", "seconds"))
        self.startBtn.setText(_translate("MainWindow", "Start"))
        self.groupBox_12.setTitle(_translate("MainWindow", "Alert config"))
        self.label_23.setText(_translate("MainWindow", "List ip receive"))
        self.groupBox_13.setTitle(_translate("MainWindow", "MySQL"))
        self.mysql_error_check.setText(_translate("MainWindow", "New error"))
        self.mysql_cons_check.setText(_translate("MainWindow", "Max connections"))
        self.groupBox_14.setTitle(_translate("MainWindow", "Tomcat"))
        self.tomcat_percent_check.setText(_translate("MainWindow", "New server error"))
        self.label_18.setText(_translate("MainWindow", " "))
        self.tomcat_maxerr_check.setText(_translate("MainWindow", "Max requests"))
        self.groupBox_15.setTitle(_translate("MainWindow", "Mongodb"))
        self.mongo_lock_check.setText(_translate("MainWindow", "max global lock"))
        self.mongo_max_con_check.setText(_translate("MainWindow", "Max connections"))
        self.groupBox_5.setTitle(_translate("MainWindow", "Metricbeat"))
        self.label_7.setText(_translate("MainWindow", "Source path"))
        self.metric_source.setPlaceholderText(_translate("MainWindow", "C:\\metricbeat"))
        self.metric_conf.setText(_translate("MainWindow", "Save config"))
        self.metri_cmd.setText(_translate("MainWindow", "Run with cmd"))
        self.metric_create_service.setText(_translate("MainWindow", "Create service"))
        self.metric_start.setText(_translate("MainWindow", "Start service"))
        self.metric_stop.setText(_translate("MainWindow", "Stop service"))
        self.metric_del.setText(_translate("MainWindow", "Delete service"))
        self.label_9.setText(_translate("MainWindow", "Service name"))
        self.metric_name.setText(_translate("MainWindow", "metricbeat"))
        self.metric_name.setPlaceholderText(_translate("MainWindow", "metricbeat"))
        self.label_8.setText(_translate("MainWindow", "Modules"))
        self.metric_system.setText(_translate("MainWindow", "System"))
        self.metric_tomcat.setText(_translate("MainWindow", "Tomcat"))
        self.metric_mysql.setText(_translate("MainWindow", "MySQL"))
        self.metric_mongo.setText(_translate("MainWindow", "Mongodb"))
        self.metric_other.setText(_translate("MainWindow", "Other"))
        self.label_14.setText(_translate("MainWindow", "Tomcat hosts  "))
        self.g_tomcat_host.setPlaceholderText(_translate("MainWindow", "host:port"))
        self.label_17.setText(_translate("MainWindow", "Mongodb hosts"))
        self.g_mongodb_host.setPlaceholderText(_translate("MainWindow", "[user:pass@]host[:port]"))
        self.label_16.setText(_translate("MainWindow", "MySQL hosts   "))
        self.g_mysql_host.setPlaceholderText(_translate("MainWindow", "user:pass@tcp(host:port)"))
        self.groupBox_6.setTitle(_translate("MainWindow", "Filebeat"))
        self.filebeat_conf.setText(_translate("MainWindow", "Save config"))
        self.filebeat_cmd.setText(_translate("MainWindow", "Run with cmd"))
        self.filebeat_service.setText(_translate("MainWindow", "Create service"))
        self.filebeat_start.setText(_translate("MainWindow", "Start service"))
        self.filebeat_stop.setText(_translate("MainWindow", "Stop service"))
        self.filebeat_del.setText(_translate("MainWindow", "Delete service"))
        self.label_10.setText(_translate("MainWindow", "Source path"))
        self.filebeat_source.setPlaceholderText(_translate("MainWindow", "C:\\filebeat"))
        self.label_12.setText(_translate("MainWindow", "Service name"))
        self.filebeat_name.setText(_translate("MainWindow", "filebeat"))
        self.filebeat_name.setPlaceholderText(_translate("MainWindow", "filebeat"))
        self.label_21.setText(_translate("MainWindow", "Tomcat logs paths"))
        self.filebeat_tomcat_path.setPlaceholderText(_translate("MainWindow", "host:port"))
        self.label_22.setText(_translate("MainWindow", "MySQL logs paths "))
        self.filebeat_mysql_path.setPlaceholderText(_translate("MainWindow", "user:pass@tcp(host:port)"))
        self.label_11.setText(_translate("MainWindow", "Modules"))
        self.filebeat_tomcat.setText(_translate("MainWindow", "Tomcat"))
        self.filebeat_mysql.setText(_translate("MainWindow", "MySQL"))
        self.filebeat_other.setText(_translate("MainWindow", "Other input"))
        self.groupBox_7.setTitle(_translate("MainWindow", "General"))
        self.label_13.setText(_translate("MainWindow", "Logstash service name"))
        self.g_logstash_name.setPlaceholderText(_translate("MainWindow", "logstash"))
        self.label_15.setText(_translate("MainWindow", "Logstash host"))
        self.g_logstash_host.setText(_translate("MainWindow", "localhost:5044"))
        self.g_logstash_host.setPlaceholderText(_translate("MainWindow", "host:port"))
        self.groupBox_8.setTitle(_translate("MainWindow", "Logstash"))
        self.logstash_config.setText(_translate("MainWindow", "Save config"))
        self.logstash_cmd.setText(_translate("MainWindow", "Run with cmd"))
        self.logstash_service.setText(_translate("MainWindow", "Create service"))
        self.logstash_start.setText(_translate("MainWindow", "Start service"))
        self.logstash_stop.setText(_translate("MainWindow", "Stop service"))
        self.logstash_del.setText(_translate("MainWindow", "Delete service"))
        self.groupBox_9.setTitle(_translate("MainWindow", "Input"))
        self.groupBox_10.setTitle(_translate("MainWindow", "Filter"))
        self.groupBox_11.setTitle(_translate("MainWindow", "Output"))
        self.label_36.setText(_translate("MainWindow", "Source path"))
        self.logstash_source.setPlaceholderText(_translate("MainWindow", "C:\\logstash"))
        self.label_37.setText(_translate("MainWindow", "Service name "))
        self.logstash_name.setText(_translate("MainWindow", "logstash"))
        self.logstash_name.setPlaceholderText(_translate("MainWindow", "logstash"))
        self.label_38.setText(_translate("MainWindow", "Modules"))
        self.logstash_sys.setText(_translate("MainWindow", "System"))
        self.logstash_tomcat.setText(_translate("MainWindow", "Tomcat"))
        self.logstash_mysql.setText(_translate("MainWindow", "MySQL"))
        self.logstash_mongodb.setText(_translate("MainWindow", "Mongodb"))
        self.logstash_other.setText(_translate("MainWindow", "Other module"))
        self.label_39.setText(_translate("MainWindow", "Beat input port"))
        self.logstash_input_port.setText(_translate("MainWindow", "5044"))
        self.logstash_input_port.setPlaceholderText(_translate("MainWindow", "5044"))
        self.label_40.setText(_translate("MainWindow", "Elasticsearch host"))
        self.e_host.setText(_translate("MainWindow", "https://localhost:9200"))
        self.e_host.setPlaceholderText(_translate("MainWindow", "https://localhost:9200"))
        self.label_42.setText(_translate("MainWindow", "Username"))
        self.label_41.setText(_translate("MainWindow", "Password"))
        self.label_43.setText(_translate("MainWindow", "Cloud id"))
        self.label_44.setText(_translate("MainWindow", "Cloud auth"))
        self.label_45.setText(_translate("MainWindow", "Api key"))
        self.menu_Main.setTitle(_translate("MainWindow", "&Main"))
        self.menu_Config.setTitle(_translate("MainWindow", "&Config"))
        self.action_Logstash.setText(_translate("MainWindow", "&Logstash"))
        self.action_Beat.setText(_translate("MainWindow", "&Beat"))
        self.action_metricbeat.setText(_translate("MainWindow", "&Metricbeat"))
        self.action_Alert.setText(_translate("MainWindow", "&Alert"))
        self.action_Elasticsearch.setText(_translate("MainWindow", "&Elasticsearch"))
        self.action_Kibana.setText(_translate("MainWindow", "&Kibana"))
        self.action_Logstash_2.setText(_translate("MainWindow", "&Logstash"))
        self.action_Filebeat_2.setText(_translate("MainWindow", "&Filebeat"))
        self.actionMetricbeat.setText(_translate("MainWindow", "Metricbeat"))

    def write(self, text):
        # Ghi văn bản vào QTextEdit
        cursor = self.g_console.textCursor()
        cursor.movePosition(QTextCursor.End)
        cursor.insertText(text)
        self.g_console.setTextCursor(cursor)
        self.g_console.ensureCursorVisible()
    
    
    def setAction(self):
        self.menu_Main.triggered.connect(lambda: self.main_windows.setCurrentIndex(0))
        self.action_Beat.triggered.connect(lambda: self.main_windows.setCurrentIndex(1))
        self.action_Logstash.triggered.connect(lambda: self.main_windows.setCurrentIndex(2))
        self.logstash_other.stateChanged.connect(self.on_checkbox_logstash_other_changed)
        self.main_windows.setCurrentIndex(0)
        self.tomcat_percent.setVisible(False)
        #alert
        self.closeBtn.clicked.connect(self.close_event)
        self.endBtn.clicked.connect(self.end_event)
        self.startBtn.clicked.connect(self.run_alarm)
        
        # metric
        self.metric_other.stateChanged.connect(self.on_checkbox_metric_other_changed)
        self.metric_tomcat.stateChanged.connect(self.on_checkbox_metric_tomcat_changed)
        self.metric_mysql.stateChanged.connect(self.on_checkbox_metric_mysql_changed)
        self.metric_mongo.stateChanged.connect(self.on_checkbox_metric_mongo_changed)
        self.metric_other_module.setEnabled(False)
        self.g_tomcat_host.setEnabled(False)
        self.g_mysql_host.setEnabled(False)
        self.g_mongodb_host.setEnabled(False)
        self.metric_create_service.clicked.connect(self.metric_create_service_func)
        self.metric_conf.clicked.connect(self.metric_config_click)
        self.metric_start.clicked.connect(self.metric_start_click)
        self.metric_stop.clicked.connect(self.metric_stop_click)
        self.metric_del.clicked.connect(self.metric_del_click)
        self.metri_cmd.clicked.connect(self.metric_cmd_click)
        
        #logstash
        self.logstash_other_input.setEnabled(False)
        self.logstash_other_filter.setEnabled(False)
        self.logstash_other_output.setEnabled(False)
        self.logstash_config.clicked.connect(self.logstash_config_click)
        self.logstash_service.clicked.connect(self.logstash_create_service_func)
        self.logstash_cmd.clicked.connect(self.logstash_cmd_click)
        self.logstash_start.clicked.connect(self.logstash_start_click)
        self.logstash_stop.clicked.connect(self.logstash_stop_click)
        self.logstash_del.clicked.connect(self.logstash_del_click)
        
        #filebeat
        self.filebeat_conf.clicked.connect(self.filebeat_config_click)
        self.filebeat_service.clicked.connect(self.filebeat_create_service_func)
        self.filebeat_cmd.clicked.connect(self.filebeat_cmd_click)
        self.filebeat_start.clicked.connect(self.filebeat_start_click)
        self.filebeat_stop.clicked.connect(self.filebeat_stop_click)
        self.filebeat_del.clicked.connect(self.filebeat_del_click)
        self.filebeat_tomcat.stateChanged.connect(self.on_checkbox_filebeat_tomcat_changed)
        self.filebeat_mysql.stateChanged.connect(self.on_checkbox_filebeat_mysql_changed)
        self.filebeat_mysql_path.setEnabled(False)
        self.filebeat_tomcat_path.setEnabled(False)

    # Other checkbox
    def on_checkbox_filebeat_mysql_changed(self, state):
        if state == QtCore.Qt.Checked:
            self.filebeat_mysql_path.setEnabled(True)
        else:
            self.filebeat_mysql_path.setEnabled(False)
            
    def on_checkbox_filebeat_tomcat_changed(self, state):
        if state == QtCore.Qt.Checked:
            self.filebeat_tomcat_path.setEnabled(True)
        else:
            self.filebeat_tomcat_path.setEnabled(False)
    
    def on_checkbox_metric_other_changed(self, state):
        if state == QtCore.Qt.Checked:
            self.metric_other_module.setEnabled(True)
        else:
            self.metric_other_module.setEnabled(False)
            
    def on_checkbox_metric_tomcat_changed(self, state):
        if state == QtCore.Qt.Checked:
            self.g_tomcat_host.setEnabled(True)
        else:
            self.g_tomcat_host.setEnabled(False)
            
    def on_checkbox_metric_mysql_changed(self, state):
        if state == QtCore.Qt.Checked:
            self.g_mysql_host.setEnabled(True)
        else:
            self.g_mysql_host.setEnabled(False)

    def on_checkbox_metric_mongo_changed(self, state):
        if state == QtCore.Qt.Checked:
            self.g_mongodb_host.setEnabled(True)
        else:
            self.g_mongodb_host.setEnabled(False)

    def on_checkbox_logstash_other_changed(self, state):
        if state == QtCore.Qt.Checked:
            self.logstash_other_input.setEnabled(True)
            self.logstash_other_filter.setEnabled(True)
            self.logstash_other_output.setEnabled(True)
        else:
            self.logstash_other_input.setEnabled(False)
            self.logstash_other_filter.setEnabled(False)
            self.logstash_other_output.setEnabled(False)
    
    # func for metricbeat
    def metric_config_click(self):
        try:
            logstash_name = self.g_logstash_name.text().strip()
            logstash_host = self.g_logstash_host.text().strip()
            source = self.metric_source.text().strip().replace("\\", "/")
            tomcat_hosts = self.g_tomcat_host.text().strip().split(",")
            mysql_hosts = self.g_mysql_host.text().strip().split(",")
            mongodb_hosts = self.g_mongodb_host.text().strip().split(",")
            name = self.metric_name.text().strip()
            module = ""
            if self.metric_system.isChecked():
                module += " system"
            if self.metric_tomcat.isChecked():
                module += " tomcat"
            if self.metric_mysql.isChecked():
                module += " mysql"
            if self.metric_mongo.isChecked():
                module += " mongodb"
            if self.metric_other.isChecked():
                other_module = self.metric_other_module.text().strip().split(",")
                for i in other_module:
                    i = i.strip()
                    if i != "":
                        module += " " + i
            del_modules = source + "/modules.d"
            # disable all module
            for file_name in os.listdir(del_modules):
                if file_name.endswith(".yml"):
                    old_path = os.path.join(del_modules, file_name)
                    new_path = os.path.join(del_modules, file_name + ".disabled")
                    shutil.move(old_path, new_path)
            # create script enable module
            f = open(source + "/active_module.ps1", "w+")
            f.truncate(0)  # need '0' when using r+
            f.write('Set-Location -Path "' + source + '"\n')
            f.write("./metricbeat modules enable" + module + "\n")
            f.close()
            path_active = r"" + source + "/active_module.ps1"
            subprocess.run(["powershell.exe", "-ExecutionPolicy", "Unrestricted", "-File", path_active])

            # config file
            metricbeat_yml(source, logstash_host)
            if self.metric_system.isChecked():
                metricbeat_module_system(source)
            if self.metric_tomcat.isChecked():
                metricbeat_module_tomcat(source, tomcat_hosts)
            if self.metric_mysql.isChecked():
                metricbeat_module_mysql(source, mysql_hosts)
                # config module mysql
                metricbeat_config_mysql(source)
            if self.metric_mongo.isChecked():
                metricbeat_module_mongodb(source, mongodb_hosts)
            
                                 
            QMessageBox.information(
                None, "Successful", "Successful run script config metricbeat!"
            )
        except Exception as e:
            QMessageBox.critical(None, "Error", f"Error: {str(e)}")
            print(e)

    def metric_create_service_func(self):
        try:
            logstash_name = self.g_logstash_name.text().strip()
            source = self.metric_source.text().strip().replace("\\", "/")
            name = self.metric_name.text().strip()
            # create ps1 script
            metric_create_ps1(source, name, logstash_name)

            script_path = source + "/metric_service.ps1"
            thread = Thread(target=run_ps1_script(script_path))
            # run the thread
            thread.start()

            QMessageBox.information(
                None, "Successful", "Successful run script create service metricbeat!"
            )
        except Exception as e:
            QMessageBox.critical(None, "Error", f"Error: {str(e)}")

    def metric_stop_click(self):
        name = self.metric_name.text().strip()
        command = "net stop " + name
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        # Lấy đầu ra và lỗi của quá trình
        out, err = process.communicate()
        # Decode và in đầu ra
        out = out.decode()
        print(out)
        # Decode và in lỗi
        err = err.decode()
        print(err)
        process.wait()

    def metric_start_click(self):
        name = self.metric_name.text().strip()
        thread = Thread(target=start_service_script(name))
        thread.start()

    def metric_del_click(self):
        name = self.metric_name.text().strip()
        command = "net stop " + name
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        # Lấy đầu ra và lỗi của quá trình
        out, err = process.communicate()
        # Decode và in đầu ra
        out = out.decode()
        print(out)
        # Decode và in lỗi
        err = err.decode()
        print(err)
        process.wait()
        command2 = "sc delete " + name
        process2 = subprocess.Popen(command2, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        # Lấy đầu ra và lỗi của quá trình
        out, err = process2.communicate()
        # Decode và in đầu ra
        out = out.decode()
        print(out)
        # Decode và in lỗi
        err = err.decode()
        print(err)
        process2.wait()

    def metric_cmd_click(self):
        source = self.metric_source.text().strip().replace("\\", "/")
        test_path = source + "/metric_run_test.bat"
        f = open(test_path, "w+")
        f.truncate(0)  # need '0' when using r+
        f.write("@echo off\n\n")
        f.write("cd " + source + "\n")
        f.write("metricbeat -e -c metricbeat.yml\n")
        f.write("\nPause")
        f.close()
        thread = Thread(target=start_cmd_test(test_path))
        thread.start()

    # func for filebeat
    def filebeat_config_click(self):
        try:
            logstash_name = self.g_logstash_name.text().strip()
            logstash_host = self.g_logstash_host.text().strip()
            source = self.filebeat_source.text().strip().replace("\\", "/")
            tomcat_logs_path = self.filebeat_tomcat_path.text().strip().replace("\\", "/")
            mysql_logs_path = self.filebeat_mysql_path.text().strip().replace("\\", "/")
            
            if self.filebeat_tomcat.isChecked():
                # config file
                filebeat_config_yml(source, tomcat_logs_path.split(","), logstash_host)
            else:
                filebeat_config_yml(source, "".split(","), logstash_host)
            del_modules = source + "/modules.d"
            # disable all module
            for file_name in os.listdir(del_modules):
                if file_name.endswith(".yml"):
                    old_path = os.path.join(del_modules, file_name)
                    new_path = os.path.join(del_modules, file_name + ".disabled")
                    shutil.move(old_path, new_path)
            # enable mysql module
            if self.filebeat_mysql.isChecked():
                old_path = os.path.join(del_modules, "mysql.yml.disabled")
                new_path = os.path.join(del_modules, "mysql.yml")
                shutil.move(old_path, new_path)
                filebeat_module_mysql(source, mysql_logs_path.split(","))
            if self.filebeat_other.isChecked():
                print("other")
                                            
            QMessageBox.information(
                None, "Successful", "Successful run script config filebeat!"
            )
        except Exception as e:
            QMessageBox.critical(None, "Error", f"Error: {str(e)}")
            print(e)

    def filebeat_cmd_click(self):
        source = self.filebeat_source.text().strip().replace("\\", "/")
        test_path = source + "/filebeat_run_test.bat"
        f = open(test_path, "w+")
        f.truncate(0)  # need '0' when using r+
        f.write("@echo off\n\n")
        f.write('rmdir /s /q "'+source+'/data/registry/filebeat"\n')
        f.write("cd " + source + "\n")
        f.write("filebeat.exe -c filebeat.yml -e\n")
        f.write("\nPause")
        f.close()
        thread = Thread(target=start_cmd_test(test_path))
        thread.start()
    
    def filebeat_create_service_func(self):
        try:
            logstash_name = self.g_logstash_name.text().strip()
            source = self.filebeat_source.text().strip().replace("\\", "/")
            name = self.filebeat_name.text().strip()
            # create ps1 script
            filebeat_create_ps1(source, name, logstash_name)

            script_path = source + "/filebeat_service.ps1"
            thread = Thread(target=run_ps1_script(script_path))
            # run the thread
            thread.start()

            QMessageBox.information(
                None, "Successful", "Successful run script create service filebeat!"
            )
        except Exception as e:
            QMessageBox.critical(None, "Error", f"Error: {str(e)}")


    def filebeat_stop_click(self):
        name = self.filebeat_name.text().strip()
        command = "net stop " + name
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        # Lấy đầu ra và lỗi của quá trình
        out, err = process.communicate()
        # Decode và in đầu ra
        out = out.decode()
        print(out)
        # Decode và in lỗi
        err = err.decode()
        print(err)
        process.wait()

    def filebeat_start_click(self):
        name = self.filebeat_name.text().strip()
        thread = Thread(target=start_service_script(name))
        thread.start()

    def filebeat_del_click(self):
        name = self.filebeat_name.text().strip()
        command = "net stop " + name
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        # Lấy đầu ra và lỗi của quá trình
        out, err = process.communicate()
        # Decode và in đầu ra
        out = out.decode()
        print(out)
        # Decode và in lỗi
        err = err.decode()
        print(err)
        process.wait()
        command2 = "sc delete " + name
        process2 = subprocess.Popen(command2, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        # Lấy đầu ra và lỗi của quá trình
        out, err = process2.communicate()
        # Decode và in đầu ra
        out = out.decode()
        print(out)
        # Decode và in lỗi
        err = err.decode()
        print(err)
        process2.wait()

    # func for logstash
    def logstash_config_click(self):
        try:
            source = self.logstash_source.text().strip().replace("\\", "/")
            beat_port = self.logstash_input_port.text().strip()
            e_host = self.e_host.text().strip()
            e_user = self.e_user.text().strip()
            e_pass = self.e_pass.text().strip()
            

            if self.logstash_other.isChecked():
                print("other")
            logstash_conf(source,beat_port,e_host,e_user,e_pass)              
            QMessageBox.information(
                None, "Successful", "Successful run script config filebeat!"
            )
        except Exception as e:
            QMessageBox.critical(None, "Error", f"Error: {str(e)}")
            print(e)
            
    def logstash_create_service_func(self):
        try:
            source = self.logstash_source.text().strip().replace("/", "\\")
            name = self.logstash_name.text().strip()
            
            # create ps1 script
            logstash_create_ps1(source, name)

            script_path = source + "/logstash_service.ps1"
            thread = Thread(target=run_ps1_script(script_path))
            # run the thread
            thread.start()

            QMessageBox.information(
                None, "Successful", "Successful run script create service logstash!"
            )
        except Exception as e:
            QMessageBox.critical(None, "Error", f"Error: {str(e)}")
    
    def logstash_cmd_click(self):
        source = self.logstash_source.text().strip().replace("\\", "/")
        test_path = source + "/logstash_run_test.bat"
        f = open(test_path, "w+")
        f.truncate(0)  # need '0' when using r+
        f.write("@echo off\n\n")
        f.write("cd " + source + "\n")
        f.write("bin\logstash -f config\logstash.conf\n")
        f.write("\nPause")
        f.close()
        thread = Thread(target=start_cmd_test(test_path))
        thread.start()
    
    def logstash_stop_click(self):
        name = self.logstash_name.text().strip()
        command = "net stop " + name
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        # Lấy đầu ra và lỗi của quá trình
        out, err = process.communicate()
        # Decode và in đầu ra
        out = out.decode()
        print(out)
        # Decode và in lỗi
        err = err.decode()
        print(err)
        process.wait()

    def logstash_start_click(self):
        name = self.logstash_name.text().strip()
        thread = Thread(target=start_service_script(name))
        thread.start()

    def logstash_del_click(self):
        name = self.logstash_name.text().strip()
        command = "net stop " + name
        process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        # Lấy đầu ra và lỗi của quá trình
        out, err = process.communicate()
        # Decode và in đầu ra
        out = out.decode()
        print(out)
        # Decode và in lỗi
        err = err.decode()
        print(err)
        process.wait()
        command2 = "sc delete " + name
        process2 = subprocess.Popen(command2, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        # Lấy đầu ra và lỗi của quá trình
        out, err = process2.communicate()
        # Decode và in đầu ra
        out = out.decode()
        print(out)
        # Decode và in lỗi
        err = err.decode()
        print(err)
        process2.wait()
        
    def close_event(self):
        list(map(alarm_scheduler.cancel, alarm_scheduler.queue))
        end_elastic_cons()
        MainWindow.destroy()
        exit()

    def end_event(self):
        list(map(alarm_scheduler.cancel, alarm_scheduler.queue))
        self.endBtn.setEnabled(False)
        self.startBtn.setEnabled(True)
        end_elastic_cons()
        print("end alarm")

    def button_click(self):
        try:
            global max_percent
            max_percent = self.memory_max.value() / 100
            global loop
            loop = self.timeSpinBox.value()
            # create a thread
            alarm_scheduler.enter(loop, 1, run_scheduler_alarm, (alarm_scheduler,))
            thread = Thread(target=run_scheduler)
            # run the thread
            thread.start()
            self.startBtn.setEnabled(False)
            self.endBtn.setEnabled(True)
            print("start {}".format(max_percent))
        except Exception as e:
            QMessageBox.critical(None, "Error", f"Error: {str(e)}")

    def run_alarm(self):
        global time_loop, memory, cpu,mysql_error,mysql_cons,mongo_cons,mongo_lock, tomcat_cons, ip_list
        try: 
            
            time_loop = int(self.timeSpinBox.value())
            el_host = self.eHosts.text().strip()
            el_user = self.eUser.text().strip()
            el_pass = self.ePassword.text().strip()
            create_elastic_cons(el_host, el_user, el_pass)
            memory = False
            cpu = False
            mysql_error = False
            mysql_cons = False
            mongo_cons = False
            mongo_lock = False
            tomcat_cons = False
            ip_list = []
            ip_text = self.eIPNoti.text().strip()
            if(ip_text != ""):
                ip_list = ip_text.split(",")
            if self.memoryCheckBox.isChecked():
                memory = True
                global memory_max
                memory_max = self.memory_max.value()
                
            if self.cpu_check.isChecked():
                cpu=True
                global cpu_max
                cpu_max = self.cpu_max.value()
                
            if self.mysql_error_check.isChecked():
                mysql_error=True
            
            if self.mysql_cons_check.isChecked():
                mysql_cons=True
                global mysql_max
                mysql_max = self.mysql_max_cons.value()
                
            if self.mongo_max_con_check.isChecked():
                mongo_cons=True
                global mongo_cons_max
                mongo_cons_max = self.mongo_max_cons.value()
                
            if self.mongo_lock_check.isChecked():
                mongo_lock=True
                global mongo_lock_max
                mongo_lock_max = self.mongo_lock.value()
                
            if self.tomcat_maxerr_check.isChecked():
                tomcat_cons=True
                global tomcat_max_cons
                tomcat_max_cons = self.tomcat_maxerr.value()
            
            alarm_scheduler.enter(time_loop, 1, run_scheduler_alarm, (alarm_scheduler,))
            thread = Thread(target=run_scheduler)
            # run the thread
            thread.start()
            
            print("run alarms")
            self.endBtn.setEnabled(True)
            self.startBtn.setEnabled(False)


        except Exception as e:
            QMessageBox.critical(None, "Error", f"Error: {str(e)}")
        
        
    
# func for thread
def run_scheduler():
    alarm_scheduler.run()


def start_cmd_test(command):
    subprocess.Popen(["cmd.exe", "/c", "start", "cmd.exe", "/c", command], shell=True)

def start_service_script(name):
    command = "net start " + name
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    # Lấy đầu ra và lỗi của quá trình
    out, err = process.communicate()
    # Decode và in đầu ra
    out = out.decode()
    print(out)
    # Decode và in lỗi
    err = err.decode()
    print(err)
    process.wait()
    
def run_ps1_script(script_path):
    # Run the PowerShell script
    subprocess.Popen(
        ["powershell.exe", "-ExecutionPolicy", "Unrestricted", "-File", script_path],
        creationflags=subprocess.CREATE_NEW_CONSOLE,
    )
    

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    
    # Ghi đè sys.stdout để chuyển thông tin từ console vào QTextEdit
    sys.stdout = ui
    print("The tool has started")
    sys.exit(app.exec_())
    
    # if not pyuac.isUserAdmin():
    #     pyuac.runAsAdmin()
    # else:
    #     import sys

    #     app = QtWidgets.QApplication(sys.argv)
        
    #     MainWindow = QtWidgets.QMainWindow()
    #     ui = Ui_MainWindow()
    #     ui.setupUi(MainWindow)
    #     MainWindow.show()
    
    # # Ghi đè sys.stdout để chuyển thông tin từ console vào QTextEdit
    # sys.stdout = ui
    # print("The tool has started")
    # sys.exit(app.exec_())

    # template
    # def run_script(self):
    #     try:

    #         QMessageBox.information(None, "Successful", "Successful run config metricbeat!")
    #     except Exception as e:
    #         QMessageBox.critical(None, "Error", f"Error: {str(e)}")